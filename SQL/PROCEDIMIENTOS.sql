--RF 001
CREATE OR REPLACE PROCEDURE PR_BUSCADORR(W_DIRECCION IN INMUEBLES.DIRECCION%TYPE) IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE DIRECCION=W_DIRECCION;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_BUSCADORR;
/

--RF 002
CREATE OR REPLACE PROCEDURE PR_FILTRAR_NUM_HAB(W_HABITACIONES IN INMUEBLES.HABITACIONES%TYPE) IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE HABITACIONES=W_HABITACIONES;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_NUM_HAB;
/

--RF 003	 
CREATE OR REPLACE PROCEDURE PR_FILTRAR_NUM_BAÑOS(W_BAÑOS IN INMUEBLES.BAÑOS%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE BAÑOS=W_BAÑOS;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_NUM_BAÑOS;
/

--RF 004
CREATE OR REPLACE PROCEDURE PR_FILTRAR_ZONA(W_ZONA IN INMUEBLES.ZONA%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE ZONA=W_ZONA;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_ZONA;
/
	
--RF 005
CREATE OR REPLACE PROCEDURE PR_FILTRAR_PRECIO (W_PRECIO IN INMUEBLES.PRECIO%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE PRECIO=W_PRECIO;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_PRECIO;
/

--RF 006 
CREATE OR REPLACE PROCEDURE PR_FILTRAR_METROS(W_METROS IN INMUEBLES.METROS%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE METROS=W_METROS;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_METROS;
/

--RF 007
CREATE OR REPLACE PROCEDURE PR_FILTRAR_TIPO_INM(W_TIPOINMUEBLE IN INMUEBLES.TIPOINMUEBLE%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE TIPOINMUEBLE=W_TIPOINMUEBLE;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) || RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) 
|| RPAD('TIPO DE CONSTRUCCION:', 25) || RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) || RPAD(W_INMUEBLES.ZONA, 25) ||
RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) || RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || 
RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_TIPO_INM;
/

--RF 008 
CREATE OR REPLACE PROCEDURE PR_FILTRAR_TIPOCONSTRUCCION(W_TIPOCONSTRUCCION IN INMUEBLES.TIPOCONSTRUCCION%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE TIPOCONSTRUCCION=W_TIPOCONSTRUCCION;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) ||
RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) || RPAD('TIPO DE CONSTRUCCION:', 25) ||
RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) ||
RPAD(W_INMUEBLES.ZONA, 25) || RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) ||
RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_TIPOCONSTRUCCION;
/

--RF 009 
CREATE OR REPLACE PROCEDURE PR_FILTRAR_EFICIENCIA(W_EFICIENCIAENERGETICA IN INMUEBLES.EFICIENCIAENERGETICA%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE EFICIENCIAENERGETICA=W_EFICIENCIAENERGETICA;
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) ||
RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) || RPAD('TIPO DE CONSTRUCCION:', 25) ||
RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) ||
RPAD(W_INMUEBLES.ZONA, 25) || RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) ||
RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_EFICIENCIA;
/

--RF 010 
CREATE OR REPLACE PROCEDURE PR_FILTRAR_EXTRAS(W_ASCENSOR IN EXTRAS.ASCENSOR%TYPE,W_GARAJE IN EXTRAS.GARAJE%TYPE,W_WIFI IN EXTRAS.WIFI%TYPE)IS
CURSOR C IS
SELECT * FROM INMUEBLES WHERE OID_IN IN (SELECT OID_IN FROM EXTRAS WHERE ASCENSOR=W_ASCENSOR AND GARAJE=W_GARAJE AND WIFI=W_WIFI);
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
OPEN C;
FETCH C INTO W_INMUEBLES;
DBMS_OUTPUT.PUT_LINE(RPAD('ID INMUEBLE:', 25) || RPAD('DIRECCION:', 25) || RPAD('PRECIO:', 25) || RPAD('ZONA:', 25) ||
RPAD('METROS CUADRADOS:', 25)||RPAD('TIPO DE INMUEBLE:', 25) || RPAD('TIPO DE CONSTRUCCION:', 25) ||
RPAD('EFICIENCIA ENERGÉTICA:', 25) || RPAD('Nº HABITACIONES:', 25) || RPAD('Nº CUARTOS DE BAÑO:', 25)|| RPAD('COMERCIAL A CARGO', 25));
DBMS_OUTPUT.PUT_LINE(LPAD('-', 120, '-'));
WHILE C%FOUND LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(W_INMUEBLES.OID_IN, 25) || RPAD(W_INMUEBLES.DIRECCION, 25) || RPAD(W_INMUEBLES.PRECIO, 25) ||
RPAD(W_INMUEBLES.ZONA, 25) || RPAD(W_INMUEBLES.METROS, 25)|| RPAD(W_INMUEBLES.TIPOINMUEBLE, 25) || RPAD(W_INMUEBLES.TIPOCONSTRUCCION, 25) ||
RPAD(W_INMUEBLES.EFICIENCIAENERGETICA, 25) || RPAD(W_INMUEBLES.HABITACIONES, 25) || RPAD(W_INMUEBLES.BAÑOS, 25) ||RPAD(W_INMUEBLES.OID_COMERCIAL, 25) );
FETCH C INTO W_INMUEBLES;
END LOOP;
CLOSE C;
END PR_FILTRAR_EXTRAS;
/

--RF 011
CREATE OR REPLACE PROCEDURE INSERTARINMUEBLEFAVORITOS(W_OID_IN IN ESTAENLISTAFAV.OID_IN%TYPE,W_OID_FAV IN ESTAENLISTAFAV.OID_FAV%TYPE) IS
W_ESTAENLISTAFAV ESTAENLISTAFAV%ROWTYPE;
W_OID_ESTAENFAV ESTAENLISTAFAV.OID_ESTAENFAV%TYPE;
BEGIN
INSERT INTO ESTAENLISTAFAV (OID_IN, OID_FAV) VALUES (W_OID_IN, W_OID_FAV);
W_OID_ESTAENFAV := SEC_ESTAENLISTAFAV.CURRVAL;
SELECT * INTO W_ESTAENLISTAFAV FROM ESTAENLISTAFAV WHERE OID_ESTAENFAV = W_OID_ESTAENFAV;
IF W_ESTAENLISTAFAV.OID_IN <> W_OID_IN OR W_ESTAENLISTAFAV.OID_FAV <> W_OID_FAV
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL ELEMENTO');
ELSE
DBMS_OUTPUT.PUT_LINE('ELEMENTO INSERTADO CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL ELEMENTO');
ROLLBACK;
END INSERTARINMUEBLEFAVORITOS;
/

--RF 012
CREATE OR REPLACE PROCEDURE INSERTARINMUEBLESEGUIMIENTO(W_OID_IN IN ESTAENLISTASEG.OID_IN%TYPE,W_OID_SEG IN ESTAENLISTASEG.OID_SEG%TYPE) IS
W_ESTAENLISTASEG ESTAENLISTASEG%ROWTYPE;
W_OID_ESTAENSEG ESTAENLISTASEG.OID_ESTAENSEG%TYPE;
BEGIN
INSERT INTO ESTAENLISTASEG (OID_IN, OID_SEG) VALUES (W_OID_IN, W_OID_SEG);
W_OID_ESTAENSEG := SEC_ESTAENLISTASEG.CURRVAL;
SELECT * INTO W_ESTAENLISTASEG FROM ESTAENLISTASEG WHERE OID_ESTAENSEG = W_OID_ESTAENSEG;
IF W_ESTAENLISTASEG.OID_IN != W_OID_IN OR W_ESTAENLISTASEG.OID_SEG != W_OID_SEG
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL AÑADIR EL INMUEBLE A LA LISTA');
ELSE
DBMS_OUTPUT.PUT_LINE('INMUEBLE AÑADIDO CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL AÑADIR EL INMUEBLE A LA LISTA');
ROLLBACK;
END INSERTARINMUEBLESEGUIMIENTO;
/

--RF 013
CREATE OR REPLACE PROCEDURE PR_NOTIFICAR
(W_MENSAJE IN NOTIFICACIONES.MENSAJE%TYPE, W_OID_US IN NOTIFICACIONES.OID_US%TYPE)IS
W_NOTIFICACIONES NOTIFICACIONES%ROWTYPE;
W_OID_NOT NOTIFICACIONES.OID_NOT%TYPE;
BEGIN
INSERT INTO NOTIFICACIONES (MENSAJE, OID_US) VALUES (W_MENSAJE, W_OID_US);
W_OID_NOT := SEC_NOTIFICACIONES.CURRVAL;
SELECT * INTO W_NOTIFICACIONES FROM NOTIFICACIONES WHERE OID_NOT = W_OID_NOT;
IF W_NOTIFICACIONES.OID_NOT != W_OID_NOT
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL NOTIFICAR');
ELSE
DBMS_OUTPUT.PUT_LINE('NOTIFICACIÓN ENVIADA CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL NOTIFICAR');
ROLLBACK;
END PR_NOTIFICAR;
/

--RF 014
CREATE OR REPLACE PROCEDURE PR_CREAR_HILOS_FORO 
(W_TITULO IN HILOSFORO.TITULO%TYPE,W_DESCRIPCION IN HILOSFORO.DESCRIPCION%TYPE,
W_FECHA IN HILOSFORO.FECHA%TYPE,W_OID_CO IN HILOSFORO.OID_CO%TYPE,W_OID_US IN HILOSFORO.OID_US%TYPE) IS
W_HILOSFORO HILOSFORO%ROWTYPE;
BEGIN
INSERT INTO HILOSFORO (TITULO, DESCRIPCION, FECHA, OID_CO, OID_US) VALUES (W_TITULO, W_DESCRIPCION, W_FECHA, W_OID_CO, W_OID_US);
SELECT * INTO W_HILOSFORO FROM HILOSFORO WHERE TITULO=W_TITULO;
IF W_HILOSFORO.TITULO != W_TITULO OR W_HILOSFORO.DESCRIPCION != W_DESCRIPCION OR
W_HILOSFORO.FECHA != W_FECHA OR W_HILOSFORO.OID_CO != W_OID_CO OR W_HILOSFORO.OID_US != W_OID_US
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL ELEMENTO');
ELSE
DBMS_OUTPUT.PUT_LINE('ELEMENTO INSERTADO CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL ELEMENTO');
ROLLBACK;
END PR_CREAR_HILOS_FORO;
/

--RF 015
CREATE OR REPLACE PROCEDURE PR_RESPONDER_HILOS_FORO (W_TEXTO IN RESPUESTAS.TEXTO%TYPE,W_FECHA IN RESPUESTAS.FECHA%TYPE, 
W_OID_CO IN RESPUESTAS.OID_CO%TYPE,W_OID_US IN RESPUESTAS.OID_US%TYPE,W_TITULO IN RESPUESTAS.TITULO%TYPE) IS
W_RESPUESTAS RESPUESTAS%ROWTYPE;
W_OID_M RESPUESTAS.OID_M%TYPE;
BEGIN
INSERT INTO RESPUESTAS (TEXTO, FECHA, OID_CO, OID_US, TITULO) VALUES (W_TEXTO, W_FECHA, W_OID_CO, W_OID_US, W_TITULO);
W_OID_M := SEC_RESPUESTAS.CURRVAL;
SELECT * INTO W_RESPUESTAS FROM RESPUESTAS WHERE OID_M = W_OID_M;
IF W_RESPUESTAS.TEXTO != W_TEXTO OR W_RESPUESTAS.FECHA != W_FECHA OR W_RESPUESTAS.OID_CO != W_OID_CO OR W_RESPUESTAS.OID_US != W_OID_US OR W_RESPUESTAS.TITULO != W_TITULO 
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR LA RESPUESTA');
ELSE
DBMS_OUTPUT.PUT_LINE('RESPUESTA INSERTADA CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR LA RESPUESTA');
ROLLBACK;
END PR_RESPONDER_HILOS_FORO;
/

--RF 016
CREATE OR REPLACE PROCEDURE PR_BORRAR_RESPUESTA (W_OID_M IN RESPUESTAS.OID_M%TYPE, W_OID_US IN RESPUESTAS.OID_US%TYPE) IS
BEGIN
DELETE FROM RESPUESTAS WHERE OID_M=W_OID_M AND OID_US=W_OID_US;
COMMIT;
END PR_BORRAR_RESPUESTA;
/

--RF 17
CREATE OR REPLACE PROCEDURE PR_BORRAR_RESPUESTA_COMERCIAL (W_OID_M IN RESPUESTAS.OID_M%TYPE, W_OID_CO IN RESPUESTAS.OID_CO%TYPE) IS
CONT NUMBER;
BEGIN 
SELECT COUNT(*) INTO CONT FROM COMERCIALES WHERE OID_CO=W_OID_CO;
IF CONT!=0 THEN
DELETE FROM RESPUESTAS WHERE OID_M=W_OID_M;
END IF;
COMMIT;
END PR_BORRAR_RESPUESTA_COMERCIAL;
/

--RF 18
CREATE OR REPLACE PROCEDURE PR_CAMBIAR_DESCRIPCION (W_TITULO IN HILOSFORO.TITULO%TYPE,W_DESCRIPCION IN HILOSFORO.DESCRIPCION%TYPE,
W_FECHA IN HILOSFORO.FECHA%TYPE,W_OID_CO IN HILOSFORO.OID_CO%TYPE,W_OID_US IN HILOSFORO.OID_US%TYPE) IS
W_HILOSFORO HILOSFORO%ROWTYPE;
BEGIN
UPDATE HILOSFORO SET DESCRIPCION=W_DESCRIPCION WHERE TITULO=W_TITULO;
UPDATE HILOSFORO SET FECHA=W_FECHA WHERE TITULO=W_TITULO;
UPDATE HILOSFORO SET OID_CO=W_OID_CO WHERE TITULO=W_TITULO;
UPDATE HILOSFORO SET OID_US=W_OID_US WHERE TITULO=W_TITULO;
SELECT * INTO W_HILOSFORO FROM HILOSFORO WHERE TITULO = W_TITULO;
IF W_HILOSFORO.TITULO != W_TITULO OR W_HILOSFORO.DESCRIPCION != W_DESCRIPCION OR
W_HILOSFORO.FECHA != W_FECHA OR W_HILOSFORO.OID_CO != W_OID_CO OR W_HILOSFORO.OID_US != W_OID_US
THEN
DBMS_OUTPUT.PUT_LINE('FALLO EN LA ACTUALIZACIÓN DE LA DESCRIPCIÓN');
ELSE
DBMS_OUTPUT.PUT_LINE('DESCRIPCIÓN ACTUALIZADA CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO EN LA ACTUALIZACIÓN DE LA DESCRIPCIÓN');
ROLLBACK;
END PR_CAMBIAR_DESCRIPCION;
/

--RF 19
CREATE OR REPLACE PROCEDURE PR_CREAR_PERFIL_INMUEBLE (W_DIRECCION IN INMUEBLES.DIRECCION%TYPE,W_PRECIO IN INMUEBLES.PRECIO%TYPE,W_ZONA IN INMUEBLES.ZONA%TYPE,W_METROS IN INMUEBLES.METROS%TYPE,
W_TIPOINMUEBLE IN INMUEBLES.TIPOINMUEBLE%TYPE,W_TIPOCONSTRUCCION IN INMUEBLES.TIPOCONSTRUCCION%TYPE,W_EFICIENCIAENERGETICA IN INMUEBLES.EFICIENCIAENERGETICA%TYPE,
W_HABITACIONES IN INMUEBLES.HABITACIONES%TYPE,W_BAÑOS IN INMUEBLES.BAÑOS%TYPE) IS
W_INMUEBLES INMUEBLES%ROWTYPE;
W_OID_IN INMUEBLES.OID_IN%TYPE;
BEGIN
INSERT INTO INMUEBLES (DIRECCION, PRECIO, ZONA, METROS, TIPOINMUEBLE, TIPOCONSTRUCCION, EFICIENCIAENERGETICA, HABITACIONES, BAÑOS) 
VALUES (W_DIRECCION, W_PRECIO, W_ZONA, W_METROS, W_TIPOINMUEBLE, W_TIPOCONSTRUCCION, W_EFICIENCIAENERGETICA, W_HABITACIONES, W_BAÑOS);
W_OID_IN := SEC_INMUEBLES.CURRVAL;
SELECT * INTO W_INMUEBLES FROM INMUEBLES WHERE OID_IN = W_OID_IN;
IF W_INMUEBLES.DIRECCION <> W_DIRECCION OR W_INMUEBLES.PRECIO <> W_PRECIO OR W_INMUEBLES.ZONA <> W_ZONA OR W_INMUEBLES.METROS <> W_METROS OR W_INMUEBLES.TIPOINMUEBLE <> W_TIPOINMUEBLE 
OR W_INMUEBLES.TIPOCONSTRUCCION <> W_TIPOCONSTRUCCION OR W_INMUEBLES.EFICIENCIAENERGETICA <> W_EFICIENCIAENERGETICA OR W_INMUEBLES.HABITACIONES <> W_HABITACIONES 
OR W_INMUEBLES.BAÑOS <> W_BAÑOS
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL INMUEBLE');
ELSE
DBMS_OUTPUT.PUT_LINE('INMUEBLE INSERTADO CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR EL INMUEBLE');
ROLLBACK;
END PR_CREAR_PERFIL_INMUEBLE;
/

--RF 20
CREATE OR REPLACE PROCEDURE PR_ACTUALIZAR_INMUEBLE
(W_OID_IN IN INMUEBLES.OID_IN%TYPE,W_DIRECCION IN INMUEBLES.DIRECCION%TYPE,W_PRECIO IN INMUEBLES.PRECIO%TYPE,W_ZONA IN INMUEBLES.ZONA%TYPE,W_METROS IN INMUEBLES.METROS%TYPE,
W_TIPOINMUEBLE IN INMUEBLES.TIPOINMUEBLE%TYPE,W_TIPOCONSTRUCCION IN INMUEBLES.TIPOCONSTRUCCION%TYPE,W_EFICIENCIAENERGETICA IN INMUEBLES.EFICIENCIAENERGETICA%TYPE,
W_HABITACIONES IN INMUEBLES.HABITACIONES%TYPE,W_BAÑOS IN INMUEBLES.BAÑOS%TYPE) IS
W_INMUEBLES INMUEBLES%ROWTYPE;
BEGIN
UPDATE INMUEBLES SET DIRECCION=W_DIRECCION WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET PRECIO=W_PRECIO WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET ZONA=W_ZONA WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET METROS=W_METROS WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET TIPOINMUEBLE=W_TIPOINMUEBLE WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET TIPOCONSTRUCCION=W_TIPOCONSTRUCCION WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET EFICIENCIAENERGETICA=W_EFICIENCIAENERGETICA WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET HABITACIONES=W_HABITACIONES WHERE OID_IN=W_OID_IN;
UPDATE INMUEBLES SET BAÑOS=W_BAÑOS WHERE OID_IN=W_OID_IN;
SELECT * INTO W_INMUEBLES FROM INMUEBLES WHERE OID_IN = W_OID_IN;
IF W_INMUEBLES.DIRECCION <> W_DIRECCION OR W_INMUEBLES.PRECIO <> W_PRECIO OR W_INMUEBLES.ZONA <> W_ZONA OR W_INMUEBLES.METROS <> W_METROS OR W_INMUEBLES.TIPOINMUEBLE <> W_TIPOINMUEBLE 
OR W_INMUEBLES.TIPOCONSTRUCCION <> W_TIPOCONSTRUCCION OR W_INMUEBLES.EFICIENCIAENERGETICA <> W_EFICIENCIAENERGETICA OR W_INMUEBLES.HABITACIONES <> W_HABITACIONES 
OR W_INMUEBLES.BAÑOS <> W_BAÑOS
THEN
DBMS_OUTPUT.PUT_LINE('FALLO EN LA ACTUALIZACIÓN DEL INMUEBLE');
ELSE
DBMS_OUTPUT.PUT_LINE('INMUEBLE ACTUALIZADO CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO EN LA ACTUALIZACIÓN DEL INMUEBLE');
ROLLBACK;
END PR_ACTUALIZAR_INMUEBLE;
/

--RF 21
CREATE OR REPLACE PROCEDURE PR_ANADIR_IMAGEN(W_OID_IN IN IMAGENES.OID_IN%TYPE) IS
W_IMAGENES IMAGENES%ROWTYPE;
W_OID_IM IMAGENES.OID_IM%TYPE;
BEGIN
INSERT INTO IMAGENES (OID_IN) VALUES (W_OID_IN);
W_OID_IM := SEC_IMAGENES.CURRVAL;
SELECT * INTO W_IMAGENES FROM IMAGENES WHERE OID_IM = W_OID_IM;
DBMS_OUTPUT.PUT_LINE(RPAD(W_IMAGENES.OID_IM,25)||RPAD(W_IMAGENES.OID_IN,25));
IF W_IMAGENES.OID_IN != W_OID_IN
THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR LA IMAGEN');
ELSE
DBMS_OUTPUT.PUT_LINE('IMAGEN INSERTADA CORRECTAMENTE');
END IF;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('FALLO AL INSERTAR LA IMAGEN');
ROLLBACK;
END PR_ANADIR_IMAGEN;
/

--RF 22
CREATE OR REPLACE PROCEDURE PR_ACTUALIZAR_CO_INM
(W_OID_IN IN INMUEBLES.OID_IN%TYPE,W_OID_COMERCIAL IN INMUEBLES.OID_COMERCIAL%TYPE) IS
BEGIN
UPDATE INMUEBLES SET OID_COMERCIAL=W_OID_COMERCIAL WHERE OID_IN=W_OID_IN;
END PR_ACTUALIZAR_CO_INM;
/

--RF 23
CREATE OR REPLACE PROCEDURE PR_ACTUALIZAR_NOMBRE_APELLIDOS
(W_OID_US IN USUARIOS.OID_US%TYPE,W_NOMBRE IN USUARIOS.NOMBRE%TYPE,W_APELLIDOS IN USUARIOS.APELLIDOS%TYPE) IS
BEGIN
UPDATE USUARIOS SET NOMBRE=W_NOMBRE WHERE OID_US=W_OID_US;
UPDATE USUARIOS SET APELLIDOS=W_APELLIDOS WHERE OID_US=W_OID_US;
END PR_ACTUALIZAR_NOMBRE_APELLIDOS;
/

--RF 24
CREATE OR REPLACE PROCEDURE PR_ACTUALIZAR_CORREO_TLF
(W_OID_US IN USUARIOS.OID_US%TYPE,W_CORREO IN USUARIOS.CORREO_ELECTRONICO%TYPE,W_TELEFONO IN USUARIOS.TELEFONO%TYPE) IS
BEGIN
UPDATE USUARIOS SET CORREO_ELECTRONICO=W_CORREO WHERE OID_US=W_OID_US;
UPDATE USUARIOS SET TELEFONO=W_TELEFONO WHERE OID_US=W_OID_US;
END PR_ACTUALIZAR_CORREO_TLF;
/

--RF 25
CREATE OR REPLACE PROCEDURE PR_ANADIR_A_LISTAFAV
(W_OID_ESTAENFAV IN ESTAENLISTAFAV.OID_ESTAENFAV%TYPE,W_OID_US IN USUARIOS.OID_US%TYPE, W_OID_IN IN ESTAENLISTAFAV.OID_IN%TYPE) IS
BEGIN
INSERT INTO ESTAENLISTAFAV VALUES (W_OID_ESTAENFAV, W_OID_IN, (SELECT OID_FAV FROM USUARIOS WHERE OID_US=W_OID_US));
END PR_ANADIR_A_LISTAFAV;
/

CREATE OR REPLACE PROCEDURE PR_ANADIR_A_LISTASEG
(W_OID_ESTAENSEG IN ESTAENLISTASEG.OID_ESTAENSEG%TYPE, W_OID_US IN USUARIOS.OID_US%TYPE, W_OID_IN IN ESTAENLISTASEG.OID_IN%TYPE) IS
BEGIN
INSERT INTO ESTAENLISTASEG VALUES (W_OID_ESTAENSEG , W_OID_IN, (SELECT OID_SEG FROM USUARIOS WHERE OID_US=W_OID_US));
END PR_ANADIR_A_LISTASEG;
/

CREATE OR REPLACE PROCEDURE PR_ELIMINAR_DE_LISTAFAV
(W_OID_US IN USUARIOS.OID_US%TYPE, W_OID_IN IN ESTAENLISTAFAV.OID_IN%TYPE) IS
BEGIN
DELETE FROM ESTAENLISTAFAV WHERE (OID_FAV=(SELECT OID_FAV FROM USUARIOS WHERE OID_US=W_OID_US) AND OID_IN=W_OID_IN);
END PR_ELIMINAR_DE_LISTAFAV;
/

CREATE OR REPLACE PROCEDURE PR_ELIMINAR_DE_LISTASEG
(W_OID_US IN USUARIOS.OID_US%TYPE, W_OID_IN IN ESTAENLISTASEG.OID_IN%TYPE) IS
BEGIN
DELETE FROM ESTAENLISTASEG WHERE (OID_SEG=(SELECT OID_SEG FROM USUARIOS WHERE OID_US=W_OID_US) AND OID_IN=W_OID_IN);
END PR_ELIMINAR_DE_LISTASEG;
/
